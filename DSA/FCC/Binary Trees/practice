// depth first traversal -> iterative
const depthFirstTraversal = (root) => {
    
    let result = [];
    let stack = [ root ];
    
    while(stack.length > 0) {
        let current = stack.pop();
        result.push(current.val);
        
        if(current.right) stack.push(current.right);
        if(current.left) stack.push(current.left);
    }
    
    return result;
}

// depth first traversal -> recursive
const depthRecursive = (root) => {
    
    if(root === null) return [];
    
    let leftValues = depthRecursive(root.left);
    let rightValues = depthRecursive(root.right);
    
    return [root.val, ...leftValues, ...rightValues];
}


// breadth first traversal => iterative 
const breadthFirstTraversal = (root) => {
    if(root === null) return [];

    let result = [];
    let queue = [ root ];
    
    while(queue.length > 0) {
        let current = queue.shift();
        result.push(current);
        
        if(current.left) queue.push(current.left);
        if(current.right) queue.push(current.right);
    }

    return result;
}


// tree includes or not

const includes = (root, target) => {

    if(root === null) return false;
    
    let stack = [ root ];
    
    while(stack.length > 0) {
        let current = stack.pop();
        
        if(current.val === target) return true;
        
        if(current.left) stack.push(current.left);
        if(current.right) stack.push(current.right);
    }
    
    return false;
}


// includes the element or not with the depth first recurssion
const includesDepthRecursive = (root, target) => {
    if(root === null) return false;
    if(root.val === target) return true;
    
    let leftValues = includesDepthRecursive(root.left, target);
    let rightValues = includesDepthRecursive(root.right, target);
    
    return (leftValues || rightValues);
}


// includes the element or not with the breadth first recurssion


const includesDepth = (root, target) => {

    if(root === null) reuturn false;
    
    let queue = [ root ];
    
    while(queue.length > 0) {
        let current = queue.shift();
        
        if(current.val === target) return true;
        
        if(current.left) queue.push(current.left);
        if(current.right) queue.push(current.right);
    }
    
    return false;
}


// finding the sum of a tree recursive solution

const treeSum = (root, result = 0) => {
    if(root === null) return 0;
    
    let leftValue = treeSum(root.left, result);
    let rightValue = treeSum(root.right, result);
    
    return root.val + leftValue + rightValue;
}


// finding the sum of tree (iterative approach)

const treeSum = (root) => {
    if(root === null) return 0;
    
    let sum = 0;
    let stack = [ root ];
    
    while(stack.length > 0) {
        let current = stack.pop();
        sum += current.val;
        
        if(current.left) stack.push(current.left);
        if(current.right) stack.push(current.right);
    }
    
    return sum;
}

// finding the min in tree (recursive approach)

const treeMin = (root) => {
        
    if(root === null) return Infinity;
      
    let leftValue = treeMin(root.left);
    let rightValue = treeMin(root.right);
    
    return Math.min(root.val, leftValue, rightValue);
} 

// finding the min in tree (iterative approach)

const treeMinIterative = (root) => {
    if(root === null) return "none";
    
    let min = Infinity;
    let stack = [root];
    
    while(stack.length < 0) {
        let current = stack.pop();
        
        if(current.val < min) min = current.val;
        
        if(current.left) stack.push(current.left);
        if(current.right) stack.push(current.right);
    }
    
    return min;
}


// Tree min with the depth first approach

const treeMinDepthFirst = (root) => {
    let min = root.val;
    let queue = [root];
    
    while(queue.length < 0) {
        let current = queue.shift();
        
        if(current.val < min) min = current.val;
        
        if(current.left) queue.push(current.left);
        if(current.right) queue.push(current.right);
    }
    
    return min;
}





