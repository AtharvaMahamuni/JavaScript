// TODO: Binary Search (Recursive)

const binarySearch = (array, key, low, high) => {
    if(high < low) return 'No element found';

    let mid = low + Math.floor((high - low) / 2);

    if(array[mid] === key) return mid;

    else if(array[mid] > key)
        return binarySearch(array, key, low+1, high);

    else
        return binarySearch(array, key, low, mid-1);
}


// TODO: Binary Search (Iterative)

const binarySearchIterative = (array, key) => {
    low = 0;
    high = array.length - 1;
    
    while(high >= low) {
        let mid = low + Math.floor((high - low) / 2);

        if(key == array[mid])
            return mid;

        else if(key > array[mid])
            low = mid + 1;
        
        else if(key < array[mid])
            high = mid - 1;
    }

    return 'No element found';
}


// TODO: Rotation Point of an array

const rotationPoint = (array) => {
    let low = 0;
    let high = array.length;

    while(high > low) {
        let mid = low + Math.floor((high - low) / 2);

        if(array[mid] < array[mid-1]) return mid;

        else if(array[mid+1] < array[mid]) return (mid+1);

        else if(array[mid] > array[high]) 
            low = mid + 1;
        
        else 
            high = mid - 1;
    }
}


// TODO: Comparing 3 arrays

const compareThree = (array1, array2, array3) => {
    let p1 = 0, p2 = 0, p3 = 0;

    while(p1 < array1.length && p2 < array2.length && p3 < array3.length) {
        if(array1[p1] == array2[p2] == array3[p3])
            return 'The same element ' + array1[p1];

        else if(array1[p1] < array2[p2] && array1[p1] < array3[p3])
            p1 += 1;

        else if(array2[p2] < array1[p1] && array2[p2] < array3[p3])
            p2 += 2;

        else if(array3[p3] < array1[p1] && array3[p3] < array2[p2])
            p3 += 3;
    }

    return 'No same element';
}

// TODO: Moving 0s to left side

const moveToSide = (array) => {

    let readStream = array.length - 1;
    let writeStream = array.length - 1;

    while(readStream >= 0){
        if(array[readStream] != 0) {
            array[writeStream] = array[readStream]
            writeStream -= 1;
        }
        readStream -= 1;
    }

    while(writeStream >= 0) {
        array[writeStream] = 0;
        writeStream -= 1;
    }

    return array;
}


// TODO: Stock maximum profit problem 

const maxSell = (array) => {
    let globalMaxProfit = 0;
    let globalSmall = array[0];

    for(let price of array) {
        if(price < globalSmall)
            globalSmall = price;
        if((price - globalSmall) > globalMaxProfit)
            globalMaxProfit = price - globalSmall;
    }

    return globalMaxProfit;
}